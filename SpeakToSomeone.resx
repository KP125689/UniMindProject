<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="backarrow2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>